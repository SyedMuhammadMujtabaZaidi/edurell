import pysrt
import os
import pafy
import cv2
from youtube_transcript_api import YouTubeTranscriptApi



def subs_from_srt():
    srt = pysrt.open(os.path.dirname(os.path.abspath(__file__)) + "\\video\\subtitles.srt")
    subs = []

    for sub in srt:
        # new_sentence = Subtitle(sub.text, (sub.start, sub.end))
        subs.append({"text": sub.text,
                     "start": sub.start.hours * 3600 + sub.start.minutes * 60 + sub.start.seconds + sub.start.milliseconds / 1000,
                     "end": sub.end.hours * 3600 + sub.end.minutes * 60 + sub.end.seconds + sub.end.milliseconds / 1000})

    return subs


def text_from_srt():
    srt = pysrt.open(
        os.path.dirname(os.path.abspath(__file__)) + "\\video\\subtitles.srt")
    text = ""

    for sub in srt:
        text += sub.text + " "

    return text


def get_sentences_from_punto(subs):
    temp_list = []
    temp_sentence = ""
    for s in subs:
        temp_sentence += " " + s["text"].replace("\n", " ")
        if s["text"][-1] == ".":
            temp_list.append(temp_sentence)
            temp_sentence = ""
    return temp_list


def get_youtube_cap(url):
    play = pafy.new(url).streams[0]  # we will take the lowest quality stream
    assert play is not None  # makes sure we get an error if the video failed to load
    return cv2.VideoCapture(play.url)


def speech_from_youtube(url):
    """Get the speech from a youtube video URL"""
    video_id = url.split("watch?v=")[1]

    transcript_list = YouTubeTranscriptApi.list_transcripts(video_id)

    autogenerated = False
    try:
        transcript = transcript_list.find_manually_created_transcript(['en'])
    except:
        transcript = transcript_list.find_generated_transcript(['en'])
        autogenerated = True

    subs_dict = []
    for sub in transcript.fetch():

        subs_dict.append(
            {"text": sub["text"],
             "start": sub["start"],
             "end": sub["start"] + sub["duration"]}
        )

    # if autogenerated:
    #     print("subtitle are autogenerated")

    return subs_dict, autogenerated


def get_timed_sentences(subtitles, sentences):
    '''For each sentence, add its start and end time obtained from the subtitles'''

    # Compute the number of words for each sentence and for each sub
    num_words_sentence = []
    num_words_sub = []

    for s in sentences:
        num_words_sentence.append(len(s.split()))
    for s in subtitles:
        num_words_sub.append(len(s["text"].split()))

    # Get start and end time of the punctuated sentences from the subtitles
    timed_sentences = [{"text": sentences[0], "start": subtitles[0]["start"]}]

    i = 0
    j = 0

    while i < len(num_words_sentence) and j < len(num_words_sub):
        if num_words_sentence[i] > num_words_sub[j]:
            num_words_sentence[i] = num_words_sentence[i] - num_words_sub[j]
            j += 1  # qui manca controllo su j, ma non serve

        elif num_words_sentence[i] < num_words_sub[j]:
            timed_sentences[i]["end"] = subtitles[j]["end"]
            num_words_sub[j] = num_words_sub[j] - num_words_sentence[i]
            i += 1
            if i < len(num_words_sentence) and j < len(num_words_sub):
                timed_sentences.append({"text": sentences[i], "start": subtitles[j]["start"]})
        else:
            timed_sentences[i]["end"] = subtitles[j]["end"]
            num_words_sentence[i] = 0
            num_words_sub[j] = 0
            i += 1
            j += 1
            if i < len(num_words_sentence) and j < len(num_words_sub):
                timed_sentences.append({"text": sentences[i], "start": subtitles[j]["start"]})

    """
    for i in range(0, len(timed_sentences)):

        start_to_fix = []

        j = i
        tot_length = timed_sentences[j]["start"]

        while j+1 < len(timed_sentences) and timed_sentences[j]["start"] == timed_sentences[j+1]["start"]:
            start_to_fix.append(j)
            if j+1 not in start_to_fix:
                start_to_fix.append(j+1)
                tot_length += len(timed_sentences[j]["text"])
            j+=1

        for k in range(1,len(start_to_fix)):
            time_to_add = len(timed_sentences[k-1]["text"])/tot_length
            timed_sentences[k - 1]["end"] -= time_to_add
            timed_sentences[k]["start"] = timed_sentences[k - 1]["end"]
    """




    return timed_sentences


if __name__ == '__main__':
    # print(subs_from_srt())
    speech_from_youtube("https://www.youtube.com/watch?v=PPLop4L2eGk&list=PLLssT5z_DsK-h9vYZkQkYNWcItqhlRJLN&index=1")
    speech_from_youtube("https://www.youtube.com/watch?v=wUIy7NACgEo")
